package Schedule_Project2;

class time {//시간표의 시간대 설정!
	int day;//요일
	int period;//몇 교시인지?
	
	time (int day, int period){
		this.day = day;
		this.period=period;
	}
	
}

class courseId{
	int group;//그룹번호
	int order;//그룹내의 순서
}

class course {
	String courseName;
	String instructor;
	int priority;//강의 선호도
	int timeNumber=-1;
	time [] Time = new time[6];
	courseId id = new courseId();
}

class courseGroup{
	String groupName;
	int groupCode;
	int courseNumber=-1;
	course [] Course = new course[10];
	boolean isCalculated = false;
}

class table {
	boolean [][] timeTable = new boolean[6][9];
	course [] courseInfo = new course[30];
	int totalPri=0;
}

public class Schedule_Project2 {
	//전체 강의의 그룹을 관리하는 배열
	public static courseGroup[] totalCourse = new courseGroup[10];
	
	//전체 강의의 그룹 수 (인덱스로 처리)
	public static int groupNumber=-1;
	
	//현재 시간표 후보들의 배열
	public static table[] tableList = new table[2000];
	
	//시간표 후보들의 갯수
	public static int tableNumber=-1;
	
	//모든 time들의 배열
	public static time [][] allTime = new time[6][9];
	
	//allTime배열 초기화
	public static void setAlltime() {
		for(int i=1; i<=5;i++) {
			for(int j=1; j<=8;j++) {
				time t = new time(i,j);
				allTime[i][j]=t;
			}
		}
	}
	
	//강의그룹넣기
	public static void addCourseGroup(String name){
		courseGroup g = new courseGroup();
		g.groupName = name;
		
		int i=0;
		
		while(true) {
			if(totalCourse[i]==null) {
				g.groupCode=i;
				totalCourse[i]=g;
				groupNumber++;
				System.out.println(name+"이(가) "+i+"번째 그룹으로 지정되었습니다.");
				break;
			}
			i++;
			if(i>=10) { 
				System.out.println("그룹은 최대 10개까지만 생성가능합니다.");
				break;
				}
		}
		
	}
	
	//강의를 강의 그룹에 넣기
	public static void addCourse(String name, String inst, int pri,int groupId) {
		course c = new course();
		c.courseName=name;
		c.instructor=inst;
		c.priority=pri;
		c.id.group=groupId;
		
		int i=0;
		
		while(true) {
			if(totalCourse[groupId].Course[i]==null) {
				c.id.order=i;
				totalCourse[groupId].Course[i]=c;
				totalCourse[groupId].courseNumber++;
				System.out.println(name+"이(가) "+totalCourse[groupId].groupName+"의 "+i+"번째 강의으로 지정되었습니다.");
				break;
			}
			i++;
			if(i>=10) { 
				System.out.println("강의는 한개의 그룹당은 최대 10개까지만 생성가능합니다.");
				break;
				}
		}
	}
	
	//강의에 시간 넣기
	public static void addTime(int g, int c, int day, int period ) {
		time t = new time(day, period);
		totalCourse[g].Course[c].timeNumber++;
		totalCourse[g].Course[c].Time[totalCourse[g].Course[c].timeNumber]=t;
	}
	
	//초기 tableList 설정
	 public static void setTableList(){
		 if(groupNumber==-1) {
			 System.out.println("최소 한개의 그룹이 필요합니다.");
		 }
		 else {
			 if(totalCourse[0].courseNumber==-1) {
				 System.out.println("첫번째 그룹에 최소 한개의 강의가 필요합니다.");
			 }
			 else {
				
				 for(int i=0;i<=totalCourse[0].courseNumber;i++) {
					 //i는 첫번째 그룹에서의 강의의 순서를 지칭
					 //한개의 table에 대하여 한개의 과목이 지정됨.
					table t =new table();
					
					for(int k=0;k<=totalCourse[0].Course[i].timeNumber;k++) {
						t.timeTable[totalCourse[0].Course[i].Time[k].day][totalCourse[0].Course[i].Time[k].period]=true;
					}
					
					t.courseInfo[0]=totalCourse[0].Course[i];
					t.totalPri+=totalCourse[0].Course[i].priority;
					tableNumber++;
					tableList[tableNumber]=t;
					
				 } 
			 }
		 }
	 }
	
	//테이블리스트 출력
	public static void printTables() {
		if(tableNumber==-1) {
			System.out.println("후보 시간표가 1개 이상 있어야 합니다.");
		}
		else {
			for(int i=0;i<=tableNumber;i++) {
				System.out.println("우선순위:"+tableList[i].totalPri);
				for(int j=0;(tableList[i].courseInfo[j])!=null;j++) {
					System.out.println("이름: "+tableList[i].courseInfo[j].courseName+", 교수님: "+tableList[i].courseInfo[j].instructor);
				}
				System.out.println("시간대: ");
				for(int d=1;d<=5;d++) {
					for(int p=1;p<=8;p++) {
						if(tableList[i].timeTable[d][p]==true) {
							switch (d) {
								case 1:
									System.out.println("월요일 "+p+"교시");
									break;
								case 2:
									System.out.println("화요일 "+p+"교시");
									break;
								case 3:
									System.out.println("수요일"+p+"교시");
									break;
								case 4:
									System.out.println("목요일"+p+"교시");
									break;
								case 5:
									System.out.println("금요일"+p+"교시");
									break;
								default:
									break;
							}
						}
					}
				}
				System.out.println();
			}
		}
	}
	
	//메인 메소드
	public static void main(String[] args) {
		setAlltime();
			/*course [] c1 =new course [6];
			if(c1[0]==null) {
				System.out.println("NULL!");
			}
			course c2 =new course();
			c1[0]= c2;
			if(c1[0]==null) {
				System.out.println("NULL!");
			}*/
			
			//for(int i=0; i<15; i++) {addCourseGroup("자정진"+i);}
			
			/*time [] t1 = new time[2];
			t1[0] = new time(1,2);
			t1[1] = new time(1,3);
			
			addCourseGroup("자정진");
			
			for(int i=1; i<15;i++) {
				addCourse(t1,"자유정의진리", "이만영", 1 ,0);
			}*/
			
			//table t1 =new table();
			//System.out.println(t1.timeTable[1][1]+"\n"+t1.timeTable[2][2]);
		
		addCourseGroup("글쓰기");
		addCourse("글쓰기1", "김희진교수님", 1, 0);
		addTime(0,0, 2, 3);
		addTime(0,0, 4, 3);
		
		addCourse("글쓰기2", "김희진교수님", 1, 0);
		addTime(0,1, 2, 4);
		addTime(0,1, 4, 4);
		
		addCourse("글쓰기3", "최창원교수님", 2, 0);
		addTime(0,2, 2, 7);
		addTime(0,2, 4, 7);
		addTime(0,2, 2, 8);
		addTime(0,2, 4, 8);
		
		setTableList();
		printTables();
		
	}
}
